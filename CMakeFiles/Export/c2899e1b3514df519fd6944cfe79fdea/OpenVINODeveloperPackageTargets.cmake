# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS openvino::pugixml openvino::gflags_nothreads_static openvino::nlohmann_json openvino::itt openvino::conditional_compilation openvino::util openvino::snippets openvino::offline_transformations openvino::reference openvino::shape_inference openvino::core::dev openvino::openvino_runtime_s openvino::runtime::dev openvino::format_reader openvino::ie_samples_utils openvino::interpreter_backend)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target openvino::pugixml
add_library(openvino::pugixml STATIC IMPORTED)

set_target_properties(openvino::pugixml PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<BOOL:OFF>:PUGIXML_WCHAR_MODE>;\$<\$<BOOL:OFF>:PUGIXML_COMPACT>;\$<\$<BOOL:OFF>:PUGIXML_NO_XPATH>;\$<\$<BOOL:OFF>:PUGIXML_NO_STL>;\$<\$<BOOL:OFF>:PUGIXML_NO_EXCEPTIONS>"
)

# Create imported target openvino::gflags_nothreads_static
add_library(openvino::gflags_nothreads_static STATIC IMPORTED)

set_target_properties(openvino::gflags_nothreads_static PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GFLAGS_IS_A_DLL=0"
  INTERFACE_LINK_LIBRARIES "shlwapi.lib"
)

# Create imported target openvino::nlohmann_json
add_library(openvino::nlohmann_json INTERFACE IMPORTED)

set_target_properties(openvino::nlohmann_json PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<NOT:\$<BOOL:ON>>:JSON_USE_GLOBAL_UDLS=0>;\$<\$<NOT:\$<BOOL:ON>>:JSON_USE_IMPLICIT_CONVERSIONS=0>;\$<\$<BOOL:OFF>:JSON_DISABLE_ENUM_SERIALIZATION=1>;\$<\$<BOOL:OFF>:JSON_DIAGNOSTICS=1>;\$<\$<BOOL:OFF>:JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON=1>"
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/developer_package/include/nlohmann_json"
  INTERFACE_SOURCES "${_IMPORT_PREFIX}/nlohmann_json.natvis"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include"
)

# Create imported target openvino::itt
add_library(openvino::itt STATIC IMPORTED)

set_target_properties(openvino::itt PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_itt"
  INTERFACE_LINK_LIBRARIES "openvino::util"
)

# Create imported target openvino::conditional_compilation
add_library(openvino::conditional_compilation INTERFACE IMPORTED)

set_target_properties(openvino::conditional_compilation PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_conditional_compilation"
  INTERFACE_LINK_LIBRARIES "openvino::itt"
)

# Create imported target openvino::util
add_library(openvino::util STATIC IMPORTED)

set_target_properties(openvino::util PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_util"
  INTERFACE_LINK_LIBRARIES "openvino::pugixml;\$<LINK_ONLY:Shlwapi>"
)

# Create imported target openvino::snippets
add_library(openvino::snippets STATIC IMPORTED)

set_target_properties(openvino::snippets PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_snippets"
  INTERFACE_LINK_LIBRARIES "openvino::runtime;\$<LINK_ONLY:openvino::reference>;\$<LINK_ONLY:openvino::runtime::dev>;\$<LINK_ONLY:openvino::conditional_compilation>"
)

# Create imported target openvino::offline_transformations
add_library(openvino::offline_transformations STATIC IMPORTED)

set_target_properties(openvino::offline_transformations PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_offline_transformations"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openvino::core::dev>;\$<LINK_ONLY:openvino::reference>;\$<LINK_ONLY:openvino::runtime>"
)

# Create imported target openvino::reference
add_library(openvino::reference STATIC IMPORTED)

set_target_properties(openvino::reference PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TBB_PREVIEW_WAITING_FOR_WORKERS=1;IE_THREAD=IE_THREAD_TBB;OV_THREAD=OV_THREAD_TBB"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_reference"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:TBB::tbb>;\$<LINK_ONLY:Threads::Threads>;\$<LINK_ONLY:Threads::Threads>;\$<LINK_ONLY:openvino::core::dev>"
)

# Create imported target openvino::shape_inference
add_library(openvino::shape_inference STATIC IMPORTED)

set_target_properties(openvino::shape_inference PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "\$<TARGET_PROPERTY:openvino::core::dev,INTERFACE_INCLUDE_DIRECTORIES>;${_IMPORT_PREFIX}/developer_package/include/openvino_shape_inference"
)

# Create imported target openvino::core::dev
add_library(openvino::core::dev INTERFACE IMPORTED)

set_target_properties(openvino::core::dev PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_core_dev"
  INTERFACE_LINK_LIBRARIES "openvino::itt;openvino::util"
)

# Create imported target openvino::openvino_runtime_s
add_library(openvino::openvino_runtime_s STATIC IMPORTED)

set_target_properties(openvino::openvino_runtime_s PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TBB_PREVIEW_WAITING_FOR_WORKERS=1;IE_THREAD=IE_THREAD_TBB;OV_THREAD=OV_THREAD_TBB;USE_STATIC_IE"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:TBB::tbb>;\$<LINK_ONLY:Threads::Threads>;\$<LINK_ONLY:openvino::itt>;\$<LINK_ONLY:openvino::runtime::dev>;\$<LINK_ONLY:openvino::pugixml>"
)

# Create imported target openvino::runtime::dev
add_library(openvino::runtime::dev INTERFACE IMPORTED)

set_target_properties(openvino::runtime::dev PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TBB_PREVIEW_WAITING_FOR_WORKERS=1;IE_THREAD=IE_THREAD_TBB;OV_THREAD=OV_THREAD_TBB"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_runtime_dev"
  INTERFACE_LINK_LIBRARIES "openvino::runtime;openvino::core::dev;TBB::tbb;Threads::Threads"
)

# Create imported target openvino::format_reader
add_library(openvino::format_reader STATIC IMPORTED)

# Create imported target openvino::ie_samples_utils
add_library(openvino::ie_samples_utils STATIC IMPORTED)

set_target_properties(openvino::ie_samples_utils PROPERTIES
  INTERFACE_LINK_LIBRARIES "openvino::runtime;\$<LINK_ONLY:openvino::gflags_nothreads_static>"
)

# Create imported target openvino::interpreter_backend
add_library(openvino::interpreter_backend STATIC IMPORTED)

set_target_properties(openvino::interpreter_backend PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/developer_package/include/openvino_interpreter_backend"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:openvino::reference>;\$<LINK_ONLY:openvino::util>;\$<LINK_ONLY:openvino::runtime::dev>;\$<LINK_ONLY:openvino::shape_inference>"
)

if(CMAKE_VERSION VERSION_LESS 3.1.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.1.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/OpenVINODeveloperPackageTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "openvino::runtime" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
